[{"C:\\DEV_SPRING\\project6\\frontend\\src\\index.js":"1","C:\\DEV_SPRING\\project6\\frontend\\src\\App.js":"2","C:\\DEV_SPRING\\project6\\frontend\\src\\auth.js":"3","C:\\DEV_SPRING\\project6\\frontend\\src\\views\\Form.js":"4","C:\\DEV_SPRING\\project6\\frontend\\src\\views\\View.js":"5","C:\\DEV_SPRING\\project6\\frontend\\src\\views\\Board.js":"6","C:\\DEV_SPRING\\project6\\frontend\\src\\views\\Login.js":"7","C:\\DEV_SPRING\\project6\\frontend\\src\\history.js":"8"},{"size":419,"mtime":1607771806000,"results":"9","hashOfConfig":"10"},{"size":1311,"mtime":1607771992000,"results":"11","hashOfConfig":"10"},{"size":1819,"mtime":1619428905116,"results":"12","hashOfConfig":"10"},{"size":2791,"mtime":1607772310000,"results":"13","hashOfConfig":"10"},{"size":3399,"mtime":1619428892968,"results":"14","hashOfConfig":"10"},{"size":4751,"mtime":1619362067742,"results":"15","hashOfConfig":"10"},{"size":1572,"mtime":1607772198000,"results":"16","hashOfConfig":"10"},{"size":146,"mtime":1607771826000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q7yyjx",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\DEV_SPRING\\project6\\frontend\\src\\index.js",[],"C:\\DEV_SPRING\\project6\\frontend\\src\\App.js",[],"C:\\DEV_SPRING\\project6\\frontend\\src\\auth.js",["38"],"import axios from \"axios\";\r\n\r\nconst api = \"http://192.168.1.2:3000\"; // api 주소 지정\r\n\r\n// 기본 리턴\r\nexport default {\r\n  loggedIn: false, // 로그인 여부\r\n  name: null, // 사용자명\r\n\r\n  logout() {\r\n    this.loggedIn = false;\r\n    localStorage.clear();\r\n  }, // 로그아웃 기능\r\n  default() {\r\n    axios.defaults.baseURL = api;\r\n  }, // axios의 기본 url 변경\r\n  chkAuth() {\r\n    axios.defaults.baseURL = api; // axios의 기본 url 변경\r\n\r\n    const token = localStorage.getItem(\"token\"); // 토근을 로컬스토리지에서 읽어옴\r\n    const name = localStorage.getItem(\"name\"); // 이름을 로컬스토리지에서 읽어옴\r\n    if (!token) return; // 없는경우 리턴\r\n\r\n    this.loggedIn = true; // 로그인 체크\r\n    this.name = name; // 이름 변경\r\n\r\n    // 토큰정보를 요청 시 포함하도록 업데이트\r\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\r\n    axios.defaults.headers.post[\"Authorization\"] = \"Bearer \" + token;\r\n    axios.defaults.headers.get[\"Authorization\"] = \"Bearer \" + token;\r\n    axios.defaults.headers.delete[\"Authorization\"] = \"Bearer \" + token;\r\n  },\r\n  setAuth(data) {\r\n    this.loggedIn = true; // 로그인\r\n    this.name = data.name; // 이름 설정\r\n\r\n    localStorage.setItem(\"name\", data.name); // 로컬스토리지 데이터 설정\r\n    localStorage.setItem(\"token\", data.token); // 로컬스토리지 데이터 설정\r\n\r\n    // 토큰정보를 요청 시 포함하도록 업데이트\r\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + data.token;\r\n    axios.defaults.headers.post[\"Authorization\"] = \"Bearer \" + data.token;\r\n    axios.defaults.headers.get[\"Authorization\"] = \"Bearer \" + data.token;\r\n    axios.defaults.headers.delete[\"Authorization\"] = \"Bearer \" + data.token;\r\n  },\r\n};\r\n","C:\\DEV_SPRING\\project6\\frontend\\src\\views\\Form.js",["39","40"],"import React from 'react'\r\nimport { Row, Col, Form, Button } from 'react-bootstrap'\r\nimport { history } from '../history'\r\n\r\nimport axios from 'axios'\r\n\r\nexport default class Add extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\t// 파라미터에서 id를 읽어와 수정모드인지 추가모드인지 확인\r\n\t\tthis.state = {\r\n\t\t\tid: props.match.params.id,\r\n\t\t\tmode: props.match.params.id ? 'edit' : 'add',\r\n\r\n\t\t\ttitle: null,\r\n\t\t\tcontent: null,\r\n\t\t\timage: null,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { id } = this.state // id를 읽어옴\r\n\t\tif(!id) return // id가 없는경우 종료\r\n\r\n\t\t// 수정모드이므로 게시글 정보를 읽어와 저장\r\n\t\taxios.get('/board/' + id)\r\n\t\t\t.then(res => this.setState({ ...res.data }))\r\n\t}\r\n\r\n\taction() {\r\n\t\tconst { title, content, image, mode, id } = this.state // 데이터를 읽어옴\r\n\r\n\t\t// 폼 생성 및 데이터 추가\r\n\t\tlet form = new FormData()\r\n\t\tform.append('pk', id)\r\n\t\tform.append('title', title)\r\n\t\tform.append('content', content)\r\n\t\tif(image) form.append('image', image)\r\n\r\n\t\t// 추가 모드이면 put 메소드. 업데이트면 post 메소드로 전송\r\n\t\tif(mode == 'add') {\r\n\t\t\taxios.put('/board', form, { headers: { 'Content-Type': 'multipart/form-data; charset=utf-8;' }})\r\n\t\t\t\t.then(res => { alert(res.data.msg); history.goBack() }) // 성공 시 알림 및 페이지 되돌아가기\r\n\t\t\t\t.catch(err => alert(err.response.data.msg)) // 실패 시 알림\r\n\t\t} else {\r\n\t\t\taxios.post('/board', form, { headers: { 'Content-Type': 'multipart/form-data; charset=utf-8;' }})\r\n\t\t\t\t.then(res => { alert(res.data.msg); history.goBack() }) // 성공 시 알림 및 페이지 되돌아가기\r\n\t\t\t\t.catch(err => alert(err.response.data.msg)) // 실패 시 알림\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { title, content, mode } = this.state\r\n\r\n\t\treturn (<>\r\n\t\t\t<Row className='mb-2'>\r\n\t\t\t\t<Col md={12}>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Label>제목</Form.Label>\r\n\t\t\t\t\t\t<Form.Control type='text' value={title} onChange={(event) => this.setState({ title: event.target.value })}/>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Label>내용</Form.Label>\r\n\t\t\t\t\t\t<Form.Control type='text' value={content} onChange={(event) => this.setState({ content: event.target.value })}/>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Label>이미지</Form.Label>\r\n\t\t\t\t\t\t<Form.File accept='image/*' onChange={(event) => this.setState({ image: event.target.files[0] })}/>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col md={6}>\r\n\t\t\t\t<Button className='btn-secondary btn-block' onClick={() => history.goBack()}>취소</Button>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col md={6}>\r\n\t\t\t\t\t<Button className='btn-secondary btn-block' onClick={() => this.action()}>{mode == 'add' ? '글쓰기' : '수정'}</Button>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</>)\r\n\t}\r\n}\r\n","C:\\DEV_SPRING\\project6\\frontend\\src\\views\\View.js",["41","42","43"],"import React from \"react\";\r\nimport { Row, Col, Table, Button } from \"react-bootstrap\";\r\nimport { history } from \"../history\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // 파라미터 데이터를 확인\r\n    this.state = {\r\n      id: props.match.params.id,\r\n      info: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { id } = this.state; // id 불러옴\r\n    // 게시글 정보를 읽어와 저장\r\n    axios.get(`/board/${id}`).then((res) => this.setState({ info: res.data }));\r\n  }\r\n\r\n  toggleGood() {\r\n    let { info } = this.state;\r\n    // 좋아요를 toggle방식으로 업데이트\r\n    info.good = info.good ? 0 : 1;\r\n    // state에 저장\r\n    this.setState({ info });\r\n  }\r\n\r\n  changeStar(val) {\r\n    let { info } = this.state;\r\n    // 입력한 만큼 별점 저장\r\n    info.star = val;\r\n    this.setState({ info });\r\n  }\r\n\r\n  update() {\r\n    const { id, info } = this.state;\r\n\r\n    // id와 게시글 정보를 서버에 업데이트\r\n    axios\r\n      .post(\"/board/comment\", { pk: id, ...info })\r\n      .then((res) => alert(\"코멘트를 수정하였습니다\")); // 성공 시 알림\r\n  }\r\n\r\n  render() {\r\n    const { info } = this.state; // 게시글 정보를 읽어옴\r\n    // 별점을 읽어와 버튼으로 렌더링\r\n    const stars = [];\r\n    for (let i = 0; i < 5; i++)\r\n      stars.push(\r\n        <Button\r\n          className=\"rounded-0 btn-light px-1\"\r\n          onClick={() => this.changeStar(i + 1)}\r\n        >\r\n          {i < info.star ? \"★\" : \"☆\"}\r\n        </Button>\r\n      ); // 클릭시 별점 업데이트\r\n\r\n    return (\r\n      <>\r\n        <Row className=\"mb-2\">\r\n          <Col md={12}>\r\n            <Table responsive>\r\n              <tr>\r\n                <th width=\"120\">제목</th>\r\n                <td>{info.title}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>글내용</th>\r\n                <td>\r\n                  {info.content != \"null\" ? info.content : \"내용이 없습니다\"}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>이미지</th>\r\n                <td>\r\n                  {info.image && (\r\n                    <img\r\n                      src={`http://192.168.1.2:3000/images/${info.image}`}\r\n                      width=\"100%\"\r\n                    />\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            </Table>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"mb-4\">\r\n          <Col md={12}>\r\n            <Button\r\n              className={`circle ${\r\n                info.good == 1 ? \"btn-warning\" : \"btn-light\"\r\n              } rounded-md mr-4`}\r\n              onClick={() => this.toggleGood()}\r\n            >\r\n              좋아요\r\n            </Button>\r\n\r\n            {stars}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={6}>\r\n            <Button\r\n              className=\"btn-secondary btn-block\"\r\n              onClick={() => this.update()}\r\n            >\r\n              평가내용저장\r\n            </Button>\r\n          </Col>\r\n          <Col md={6}>\r\n            <Button\r\n              className=\"btn-secondary btn-block\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              글목록보기\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","C:\\DEV_SPRING\\project6\\frontend\\src\\views\\Board.js",["44"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Table, Form, Button } from 'react-bootstrap'\r\nimport ReactPaginate from 'react-js-pagination'\r\n\r\nimport axios from 'axios'\r\nimport auth from '../auth'\r\n\r\nexport default class Board extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.state = {\r\n\t\t\tdata: [],\r\n\t\t\tpage: 0,\r\n\t\t\tcount: 0,\r\n\t\t\tperPage: 0,\r\n\t\t\tsearch: null,\r\n\t\t}\r\n\r\n\t\tthis.getData()\r\n\t}\r\n\r\n\tgetData() {\r\n\t\t// 게시글 리스트를 읽어와 저장\r\n\t\taxios.get('/board').then(res => {\r\n\t\t\tconst data = res.data\r\n\t\t\tthis.setState({ data: this.appendChkOpt(data.data), ...data })\r\n\t\t})\r\n\t}\r\n\r\n\tsearch() {\r\n\t\tconst { search } = this.state // 검색어를 읽어옴\r\n\r\n\t\t// 검색어 쿼리로 요청 및 저장\r\n\t\taxios.get('/board', { params: { search } }).then(res => {\r\n\t\t\tconst data = res.data\r\n\t\t\tthis.setState({ data: this.appendChkOpt(data.data), ...data })\r\n\t\t})\r\n\t}\r\n\r\n\thandlePage(page) {\r\n\t\tconst { search } = this.state\r\n\r\n\t\t// 페이지 업데이트. 검색어와 페이지 정보로 읽어와 저장\r\n\t\taxios.get('/board', { params: { search, page } }).then(res => {\r\n\t\t\tconst data = res.data\r\n\t\t\tthis.setState({ data: this.appendChkOpt(data.data), ...data })\r\n\t\t})\r\n\t}\r\n\r\n\t// 체크박스에 대한 옵션을 추가해주는 함수\r\n\tappendChkOpt(data) {\r\n\t\treturn data.map(obj => { return { ...obj, check: false } })\r\n\t}\r\n\t// 체크박스 클릭처리 이벤트 함수\r\n\tclickCheckbox(index) {\r\n\t\tlet { data } = this.state\r\n\t\t// data의 index 데이터에 check 옵션 toggle\r\n\t\tdata[index].check = !data[index].check\r\n\t\tthis.setState({ data }) // data저장\r\n\t}\r\n\t// 전체선택 함수\r\n\tallCheck(checked) {\r\n\t\tlet { data } = this.state\r\n\t\t// data의 모든 값들을 입력받은 checked로 저장\r\n\t\tthis.setState({ data: data.map(obj => { return { ...obj, check: checked } }) })\r\n\t}\r\n\t// pk에 대한 게시글 삭제\r\n\tdeleteOne(pk) {\r\n\t\t// pk를 옵션으로 삭제\r\n\t\taxios.delete('/board/', { data: { pk } })\r\n\t\t\t.then(res => {\r\n\t\t\t\talert(res.data.msg) // 결과 알림\r\n\t\t\t\tthis.getData() // 게시글을 새로 불러옴\r\n\t\t\t})\r\n\t}\r\n\t// 선택된 게시글 삭제\r\n\tdeleteChk() {\r\n\t\tconst { data } = this.state\r\n\t\tlet pk_list = [] // 삭제할 pk 리스트\r\n\t\t// 데이터를 반복해 체크가 되어있으면 pk_list에 추가\r\n\t\tdata.map(obj => { if(obj.check) pk_list.push(obj.id) })\r\n\t\t// 삭제 요청\r\n\t\taxios.delete('/board', { data: { pk: pk_list } })\r\n\t\t\t.then(res => {\r\n\t\t\t\talert(res.data.msg) // 결과 알림\r\n\t\t\t\tthis.getData() // 게시글을 새로 불러옴\r\n\t\t\t})\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { data, page, count, perPage } = this.state\r\n\r\n\t\treturn (<>\r\n\t\t\t<Row>\r\n\t\t\t\t<Col md={12} className='pb-4'>\r\n\t\t\t\t\t<span>안녕하세요, {auth.name}님 </span>\r\n\t\t\t\t\t<Link to='/login'>로그아웃</Link>\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t<Col md={12} className='mb-2'>\r\n\t\t\t\t\t<Table>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th><Form.Check type='checkbox' onClick={(event) => this.allCheck(event.target.checked)}/></th>\r\n\t\t\t\t\t\t\t\t<th>글 번호</th>\r\n\t\t\t\t\t\t\t\t<th>제목</th>\r\n\t\t\t\t\t\t\t\t<th>아이디</th>\r\n\t\t\t\t\t\t\t\t<th>작성자</th>\r\n\t\t\t\t\t\t\t\t<th>관리</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{data.map((obj, index) => <tr key={index}>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<input type='checkbox' checked={obj.check} onClick={() => this.clickCheckbox(index)}/>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>{obj.no}</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<Link to={`/view/${obj.id}`}>{obj.title}</Link>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>{obj.user_id}</td>\r\n\t\t\t\t\t\t\t\t<td>{obj.user_name}</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<Link to={`/edit/${obj.id}`}>수정</Link>\r\n\t\t\t\t\t\t\t\t\t<span> / </span>\r\n\t\t\t\t\t\t\t\t\t<Link onClick={() => this.deleteOne(obj.id)}>삭제</Link>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>)}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</Table>\r\n\r\n\t\t\t\t\t{/* 페이징 처리 */}\r\n\t\t\t\t\t<ReactPaginate\r\n\t\t\t\t\t\tactivePage={page}\r\n\t\t\t\t\t\ttotalItemsCount={count}\r\n\t\t\t\t\t\titemsCountPerPage={perPage}\r\n\t\t\t\t\t\tonChange={page => this.handlePage(page)}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tinnerClass='pagination'\r\n\t\t\t\t\t\titemClass='page-item'\r\n\t\t\t\t\t\tactiveClass='active'\r\n\r\n\t\t\t\t\t\tnextPageText='다음'\r\n\t\t\t\t\t\tprevPageText='이전'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t<Col md={10}>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Control type='text' onChange={(event) => this.setState({ search: event.target.value })}/>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col md={2}>\r\n\t\t\t\t\t<Button className='btn-secondary btn-block' onClick={() => this.search()}>검색</Button>\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t<Col md={6}>\r\n\t\t\t\t\t<Link to='/add'>\r\n\t\t\t\t\t\t<Button className='btn-secondary btn-block text-white'>글쓰기</Button>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col md={6}>\r\n\t\t\t\t\t<Button className='btn-secondary btn-block' onClick={() => this.deleteChk()}>선택삭제</Button>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</>)\r\n\t}\r\n}\r\n","C:\\DEV_SPRING\\project6\\frontend\\src\\views\\Login.js",[],"C:\\DEV_SPRING\\project6\\frontend\\src\\history.js",[],{"ruleId":"45","severity":1,"message":"46","line":6,"column":1,"nodeType":"47","endLine":46,"endColumn":3},{"ruleId":"48","severity":1,"message":"49","line":42,"column":11,"nodeType":"50","messageId":"51","endLine":42,"endColumn":13},{"ruleId":"48","severity":1,"message":"49","line":76,"column":86,"nodeType":"50","messageId":"51","endLine":76,"endColumn":88},{"ruleId":"48","severity":1,"message":"52","line":74,"column":33,"nodeType":"50","messageId":"51","endLine":74,"endColumn":35},{"ruleId":"53","severity":1,"message":"54","line":81,"column":21,"nodeType":"55","endLine":84,"endColumn":23},{"ruleId":"48","severity":1,"message":"49","line":96,"column":27,"nodeType":"50","messageId":"51","endLine":96,"endColumn":29},{"ruleId":"56","severity":1,"message":"57","line":83,"column":16,"nodeType":"58","messageId":"59","endLine":83,"endColumn":18},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]